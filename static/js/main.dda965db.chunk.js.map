{"version":3,"sources":["logo.svg","firebase.js","components/MessegeItems.jsx","components/Messenger.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","MessegeItems","usrName","messege","isUsr","usrname","className","message","Messenger","useState","input","setInput","crUser","setCrUser","items","setItems","useEffect","name","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","divRef","useRef","current","scrollIntoView","behavior","id","item","index","key","ref","type","value","onChange","event","target","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4ICc5BC,EAZKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEMC,YCCRC,EAXM,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,QACrBC,EAAQF,IAAUC,EAAQE,QAEhC,OACI,yBAAKC,UAAS,uBAAkBF,GAAS,eACrC,0BAAME,UAAU,UAAUH,EAAQE,SAClC,uBAAGC,UAAU,WAAWH,EAAQI,WCiE7BC,EApEG,WAAK,IAAD,EACOC,mBAAS,IADhB,mBACXC,EADW,KACLC,EADK,OAEQF,mBAAS,IAFjB,mBAEXG,EAFW,KAEJC,EAFI,OAGOJ,mBAAS,IAHhB,mBAGXK,EAHW,KAGLC,EAHK,KAKlBC,qBAAU,WACN,IAAMC,EAAOC,OAAO,2BAEpBL,EADuB,MAARI,GACKA,GAAM,iBAC3B,IAGHD,qBAAU,WACN3B,EAAG8B,WAAW,YACbC,QAAQ,aACRC,YAAW,SAAAC,GACRP,EAASO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAGA,EAAIC,gBAE1C,IAEH,IAeMC,EAASC,iBAAO,MAItB,OAHAZ,qBAAU,WACNW,EAAOE,QAAQC,eAAe,CAAEC,SAAU,cAG1C,oCACI,yBAAKzB,UAAU,eACX,yBAAKA,UAAU,OACf,uCAAaM,EAAb,KACI,yBAAKN,UAAU,cAAc0B,GAAG,WAC3BlB,EAAMU,KAAI,SAACS,EAAKC,GACb,OACI,kBAAC,EAAD,CAAcC,IAAKD,EAAOhC,QAASU,EAAQT,QAAS8B,OAI5D,yBAAKG,IAAKT,KAGd,yBAAKrB,UAAU,YACX,8BACI,2BAAO+B,KAAK,OAAOC,MAAO5B,EAAO6B,SApCrC,SAAAC,GAChB7B,EAAS6B,EAAMC,OAAOH,UAoCF,4BAAQD,KAAK,SAASK,QAjCzB,SAAAF,GACjBA,EAAMG,iBACNtD,EAAG8B,WAAW,YAAYyB,IAAI,CAC1BrC,QAAQG,EACRL,QAAQO,EACRiC,UAAWvD,IAASU,UAAU8C,WAAWC,oBAE7CpC,EAAS,MA2Be,uBAAGL,UAAU,oBAAoB0C,cAAY,gBCnD9DC,MARf,WACE,OACE,yBAAK3C,UAAU,QACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5D,c","file":"static/js/main.dda965db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAUbCgsIUDmPKK5f_umHkNWN_i1wW-GoUI\",\r\n  authDomain: \"messenger-2feb0.firebaseapp.com\",\r\n  databaseURL: \"https://messenger-2feb0.firebaseio.com\",\r\n  projectId: \"messenger-2feb0\",\r\n  storageBucket: \"messenger-2feb0.appspot.com\",\r\n  messagingSenderId: \"145428822692\",\r\n  appId: \"1:145428822692:web:d7569e39a4e4adb4a10431\",\r\n  measurementId: \"G-D4ZFYPL5G4\"\r\n});\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db;\r\n","import React from 'react'\r\n\r\nconst MessegeItems = ({usrName,messege})=>{\r\n    const isUsr = usrName===messege.usrname\r\n    const isName = usrName != null\r\n    return(\r\n        <div className={`Messege-item ${isUsr && 'UsrMessege'}`}>\r\n            <span className='Sender'>{messege.usrname}</span>\r\n            <p className='Messege'>{messege.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessegeItems;","import React,{useState,useEffect,useRef} from 'react'\r\nimport db from '../firebase' \r\nimport MessegeItems from './MessegeItems'\r\nimport firebase from 'firebase'\r\n\r\nconst Messenger = ()=>{\r\n    const [input,setInput] = useState('')\r\n    const [crUser,setCrUser]= useState('');\r\n    const [items,setItems] = useState([])\r\n\r\n    useEffect(() => {\r\n        const name = prompt('Please Enter Your Name!')\r\n        const isName = name != null\r\n        setCrUser(isName && name||'Unkown User')\r\n    }, [])\r\n    \r\n    //get data from firebase \r\n    useEffect(() => {\r\n        db.collection('messages')\r\n        .orderBy('timestamp')\r\n        .onSnapshot(snapshot=>{\r\n            setItems(snapshot.docs.map(doc=> doc.data()))\r\n        })\r\n    }, [])\r\n    //handle input value\r\n    const handleInput = event=>{\r\n        setInput(event.target.value)\r\n    }\r\n    //handle onClick Button\r\n    const handleButton = event=>{\r\n        event.preventDefault()\r\n        db.collection('messages').add({\r\n            message:input,\r\n            usrname:crUser,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp() \r\n        })\r\n        setInput('')\r\n    }\r\n\r\n    //scroll to bottom\r\n    const divRef = useRef(null);\r\n    useEffect(() => {\r\n        divRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    });\r\n    return(\r\n        <>\r\n            <div className='App-wrapper'>\r\n                <div className='App'>\r\n                <h1>Welcome {crUser}!</h1>\r\n                    <div className='Messege-box' id='my-data'>\r\n                        {items.map((item,index) =>{\r\n                            return(\r\n                                <MessegeItems key={index} usrName={crUser} messege={item}/>\r\n                            )\r\n                        }) }\r\n                        \r\n                        <div ref={divRef} />\r\n                    </div>\r\n\r\n                    <div className='Send-box'>\r\n                        <form>\r\n                            <input type=\"text\" value={input} onChange={handleInput}/>\r\n                            <button type='submit' onClick={handleButton}>\r\n                                <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Messenger","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Messenger from './components/Messenger'\nfunction App() {\n  return (\n    <div className=\"body\">\n      <Messenger/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}